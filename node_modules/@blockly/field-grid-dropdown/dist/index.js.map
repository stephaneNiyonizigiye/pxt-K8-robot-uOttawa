{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@blockly/field-grid-dropdown/webpack/universalModuleDefinition","webpack://@blockly/field-grid-dropdown/external umd {\"root\":\"Blockly\",\"commonjs\":\"blockly/core\",\"commonjs2\":\"blockly/core\",\"amd\":\"blockly/core\"}","webpack://@blockly/field-grid-dropdown/webpack/bootstrap","webpack://@blockly/field-grid-dropdown/webpack/runtime/define property getters","webpack://@blockly/field-grid-dropdown/webpack/runtime/hasOwnProperty shorthand","webpack://@blockly/field-grid-dropdown/webpack/runtime/make namespace object","webpack://@blockly/field-grid-dropdown/./src/grid_item.ts","webpack://@blockly/field-grid-dropdown/./src/grid.ts","webpack://@blockly/field-grid-dropdown/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"blockly/core\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"blockly/core\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"blockly/core\")) : factory(root[\"Blockly\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, (__WEBPACK_EXTERNAL_MODULE__370__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__370__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {browserEvents, utils} from 'blockly/core';\n\n/**\n * Class representing an item in a grid.\n */\nexport class GridItem {\n  /** The DOM element for the grid item. */\n  private element: HTMLButtonElement;\n\n  /** Identifier for a click handler to unregister during dispose(). */\n  private clickHandler: browserEvents.Data | null;\n\n  /** Callback to invoke when this item is selected. */\n  private selectionCallback: ((selectedItem: GridItem) => void) | null;\n\n  /** Whether or not this item is currently selected. */\n  private selected = false;\n\n  /**\n   * Creates a new GridItem.\n   *\n   * @param container The parent element of this grid item in the DOM.\n   * @param content The content to display in this grid item.\n   * @param value The programmatic value of this grid item.\n   * @param selectionCallback Function to call when this item is selected.\n   */\n  constructor(\n    container: HTMLElement,\n    content: string | HTMLElement,\n    private readonly value: string,\n    selectionCallback: (selectedItem: GridItem) => void,\n  ) {\n    this.selectionCallback = selectionCallback;\n\n    this.element = document.createElement('button');\n    this.element.id = utils.idGenerator.getNextUniqueId();\n    this.element.className = 'blocklyFieldGridItem';\n    this.clickHandler = browserEvents.conditionalBind(\n      this.element,\n      'click',\n      this,\n      this.onClick,\n      true,\n    );\n    container.appendChild(this.element);\n\n    const contentDom =\n      typeof content === 'string' ? document.createTextNode(content) : content;\n    this.element.appendChild(contentDom);\n\n    utils.aria.setRole(this.element, utils.aria.Role.GRIDCELL);\n  }\n\n  /**\n   * Disposes of this grid item.\n   */\n  dispose() {\n    this.selectionCallback = null;\n    this.element.remove();\n    if (this.clickHandler) {\n      browserEvents.unbind(this.clickHandler);\n      this.clickHandler = null;\n    }\n  }\n\n  /**\n   * Gets the unique (within the grid) ID for this grid item.\n   *\n   * @returns This item's unique ID.\n   */\n  getId(): string {\n    return this.element.id;\n  }\n\n  /**\n   * Gets the value associated with this grid item.\n   *\n   * @returns Value associated with this grid item.\n   */\n  getValue(): string {\n    return this.value;\n  }\n\n  /**\n   * Returns whether or not this grid item is selected.\n   *\n   * @returns True if this grid item is selected, otherwise false.\n   */\n  isSelected() {\n    return this.selected;\n  }\n\n  /**\n   * Sets whether or not this grid item is selected.\n   *\n   * @param selected True if this grid item should be selected, otherwise false.\n   */\n  setSelected(selected: boolean) {\n    this.selected = selected;\n    utils.aria.setState(this.element, utils.aria.State.SELECTED, this.selected);\n    this.element.classList.toggle(\n      'blocklyFieldGridItemSelected',\n      this.selected,\n    );\n    if (this.isSelected()) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Handles clicks on this grid item by marking it as selected.\n   */\n  private onClick() {\n    this.setSelected(true);\n    this.selectionCallback?.(this);\n  }\n\n  /**\n   * Makes this grid item the browser focus target, and scrolls it into view\n   * if needed.\n   */\n  focus() {\n    // Focus the element, but don't scroll the document since that's too\n    // aggressive.\n    this.element.focus({preventScroll: true});\n\n    const scrollingParent = this.element.offsetParent;\n    if (!scrollingParent) return;\n    const offsetTop = this.element.offsetTop;\n    const scrollTop = scrollingParent.scrollTop;\n    const spacing = this.getInterItemSpacing();\n\n    // Scroll the element into view if it's offscreen above the grid's viewport.\n    if (offsetTop < scrollTop) {\n      scrollingParent.scrollTo(0, offsetTop - spacing);\n    } else if (\n      offsetTop + this.element.offsetHeight >\n      scrollTop + scrollingParent.clientHeight\n    ) {\n      // Scroll into view if this item is below the grid's viewport.\n      scrollingParent.scrollBy(\n        0,\n        offsetTop +\n          this.element.clientHeight -\n          (scrollTop + scrollingParent.clientHeight) +\n          spacing,\n      );\n    }\n  }\n\n  /**\n   * Returns the vertical spacing between grid items in pixels.\n   *\n   * This value can be specified by the user in CSS, so we can't just use a\n   * hardcoded value. Moreover, while we could check our computed style, the\n   * grid gap can be specified in several units. Instead, this somewhat hackily\n   * finds all the sibling items in this grid and loops through them until it\n   * encounters one with a different vertical location from its predecessor,\n   * then computes the effective gap based on their relative position and\n   * height.\n   *\n   * @returns The vertical distance between items in this grid.\n   */\n  private getInterItemSpacing() {\n    const grid = this.element.closest('.blocklyFieldGrid');\n    if (!grid) return 0;\n\n    const items = [\n      ...grid.querySelectorAll('.blocklyFieldGridItem'),\n    ] as HTMLElement[];\n    if (!items.length) return 0;\n\n    const initialTop = items[0].offsetTop;\n    const initialHeight = items[0].offsetHeight;\n    for (const item of items) {\n      if (item.offsetTop !== initialTop) {\n        return item.offsetTop - initialHeight - initialTop;\n      }\n    }\n\n    return 0;\n  }\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n  browserEvents,\n  FieldDropdown,\n  ImageProperties,\n  MenuOption,\n  utils,\n} from 'blockly/core';\nimport {GridItem} from './grid_item';\n\n/**\n * Class for managing a group of items displayed in a grid.\n */\nexport class Grid {\n  /** Mapping from grid item ID to index in the items list. */\n  private itemIndices = new Map<string, number>();\n\n  /** List of items displayed in this grid. */\n  private items = new Array<GridItem>();\n\n  /** Root DOM element of this grid. */\n  private root: HTMLDivElement;\n\n  /** Identifier for keydown handler to be unregistered in dispose(). */\n  private keyDownHandler: browserEvents.Data | null = null;\n\n  /** Identifier for pointermove handler to be unregistered in dispose(). */\n  private pointerMoveHandler: browserEvents.Data | null = null;\n\n  /** Function to be called when an item in this grid is selected. */\n  private selectionCallback?: (selectedItem: GridItem) => void;\n\n  /**\n   * Creates a new Grid instance.\n   *\n   * @param container The parent element of this grid in the DOM.\n   * @param options A list of MenuOption objects representing the items to be\n   *     shown in this grid.\n   * @param columns The number of columns to display items in.\n   * @param rtl True if this grid is being shown in a right-to-left environment.\n   * @param selectionCallback Function to be called when an item in the grid is\n   *     selected.\n   */\n  constructor(\n    container: HTMLElement,\n    options: MenuOption[],\n    private readonly columns: number,\n    private readonly rtl: boolean,\n    selectionCallback: (selectedItem: GridItem) => void,\n  ) {\n    this.selectionCallback = selectionCallback;\n\n    this.root = document.createElement('div');\n    this.root.className = 'blocklyFieldGrid';\n    this.root.tabIndex = 0;\n    utils.aria.setRole(this.root, utils.aria.Role.GRID);\n    container.appendChild(this.root);\n\n    this.populateItems(options);\n\n    this.keyDownHandler = browserEvents.conditionalBind(\n      this.root,\n      'keydown',\n      this,\n      this.onKeyDown,\n    );\n\n    this.pointerMoveHandler = browserEvents.conditionalBind(\n      this.root,\n      'pointermove',\n      this,\n      this.onPointerMove,\n      true,\n    );\n\n    if (columns >= 1) {\n      this.columns = columns;\n      this.root.style.setProperty('--grid-columns', `${this.columns}`);\n    } else {\n      throw new Error(`Number of columns must be >= 1; got ${columns}`);\n    }\n  }\n\n  /**\n   * Creates grid items in the DOM given a list of model objects.\n   *\n   * @param options A list of grid item model objects.\n   */\n  private populateItems(options: MenuOption[]) {\n    let row = document.createElement('div');\n    for (const [index, item] of options.entries()) {\n      // TODO(#2507): Don't just ignore separators.\n      if (item === FieldDropdown.SEPARATOR) continue;\n\n      if (index % this.columns === 0) {\n        row = document.createElement('div');\n        row.className = 'blocklyFieldGridRow';\n        utils.aria.setRole(row, utils.aria.Role.ROW);\n        this.root.appendChild(row);\n      }\n\n      const [label, value] = item;\n      const content = (() => {\n        if (isImageProperties(label)) {\n          // Convert ImageProperties to an HTMLImageElement.\n          const image = new Image(label.width, label.height);\n          image.src = label.src;\n          image.alt = label.alt || '';\n          return image;\n        }\n        return label;\n      })();\n\n      const gridItem = new GridItem(\n        row,\n        content,\n        value,\n        (selectedItem: GridItem) => {\n          this.setSelectedValue(selectedItem.getValue());\n          this.selectionCallback?.(selectedItem);\n        },\n      );\n      this.itemIndices.set(gridItem.getId(), this.itemIndices.size);\n      this.items.push(gridItem);\n    }\n  }\n\n  /**\n   * Disposes of this grid.\n   */\n  dispose() {\n    this.selectionCallback = undefined;\n    for (const item of this.items) {\n      item.dispose();\n    }\n    this.itemIndices.clear();\n    this.items.length = 0;\n    if (this.keyDownHandler) {\n      browserEvents.unbind(this.keyDownHandler);\n      this.keyDownHandler = null;\n    }\n\n    if (this.pointerMoveHandler) {\n      browserEvents.unbind(this.pointerMoveHandler);\n      this.pointerMoveHandler = null;\n    }\n    this.root.remove();\n  }\n\n  /**\n   * Handles a keydown event in the grid, generally by moving focus.\n   *\n   * @param e The keydown event to handle.\n   */\n  private onKeyDown(e: KeyboardEvent) {\n    if (\n      !this.items.length ||\n      e.shiftKey ||\n      e.ctrlKey ||\n      e.metaKey ||\n      e.altKey\n    ) {\n      return;\n    }\n\n    switch (e.key) {\n      case 'ArrowUp':\n        this.moveFocus(-1 * this.columns, true);\n        break;\n      case 'ArrowDown':\n        this.moveFocus(this.columns, true);\n        break;\n      case 'ArrowLeft':\n        this.moveFocus(-1 * (this.rtl ? -1 : 1), true);\n        break;\n      case 'ArrowRight':\n        this.moveFocus(1 * (this.rtl ? -1 : 1), true);\n        break;\n      case 'PageUp':\n      case 'Home':\n        this.moveFocus(0, false);\n        break;\n      case 'PageDown':\n      case 'End':\n        this.moveFocus(this.items.length - 1, false);\n        break;\n      case 'Enter':\n      case 'Space':\n        // Handled via GridItem click handler, so we want its default but it\n        // must not propagate.\n        e.stopPropagation();\n        return;\n      default:\n        // Not a key the grid is interested in.\n        return;\n    }\n    // The grid used this key, don't let it have secondary effects.\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  /**\n   * Handles a pointermove event in the grid by focusing the hovered item.\n   *\n   * @param e The pointermove event to handle.\n   */\n  private onPointerMove(e: PointerEvent) {\n    // Don't highlight grid items on \"pointermove\" if the pointer didn't\n    // actually move (but the content under it did due to e.g. scrolling into\n    // view), or if the target isn't an Element, which should never happen, but\n    // TS needs to be reassured of that.\n    if (!(e.movementX || e.movementY) || !(e.target instanceof Element)) return;\n\n    const gridItem = e.target.closest('.blocklyFieldGridItem');\n    if (!gridItem) return;\n\n    const targetId = gridItem.id;\n    const targetIndex = this.itemIndices.get(targetId);\n    if (targetIndex === undefined) return;\n    this.moveFocus(targetIndex, false);\n  }\n\n  /**\n   * Selects the item with the given value in the grid.\n   *\n   * @param value The value of the grid item to select.\n   */\n  setSelectedValue(value: string) {\n    for (const [index, item] of this.items.entries()) {\n      const selected = item.getValue() === value;\n      item.setSelected(selected);\n      if (selected) {\n        this.moveFocus(index, false);\n      }\n    }\n  }\n\n  /**\n   * Moves browser focus to the grid item at the given index.\n   *\n   * @param index The index of the item to focus.\n   * @param relative True to interpret the index as relative to the currently\n   *     focused item, false to move focus to it as an absolute value.\n   */\n  private moveFocus(index: number, relative: boolean) {\n    let targetIndex = index;\n\n    if (relative) {\n      const focusedItem = this.getFocusedItem();\n      if (!focusedItem) return;\n      targetIndex += this.indexOfItem(focusedItem);\n    }\n\n    const targetItem = this.itemAtIndex(targetIndex);\n    if (!targetItem) return;\n\n    targetItem.focus();\n    utils.aria.setState(\n      this.root,\n      utils.aria.State.ACTIVEDESCENDANT,\n      targetItem.getId(),\n    );\n  }\n\n  /**\n   * Returns the index of the given item within the grid.\n   *\n   * @param item The item to return the index of.\n   * @returns The index of the given item within the grid.\n   */\n  private indexOfItem(item: GridItem): number {\n    return this.itemIndices.get(item.getId()) ?? -1;\n  }\n\n  /**\n   * Returns the GridItem object at the given index in the grid.\n   *\n   * @param index The index to retrieve the grid item at.\n   * @returns The GridItem at the given index, or undefined if the index is\n   *     invalid.\n   */\n  private itemAtIndex(index: number): GridItem | undefined {\n    return this.items[index];\n  }\n\n  /**\n   * Returns the currently focused grid item, if any.\n   *\n   * @returns The focused grid item, or undefined if no item is focused.\n   */\n  private getFocusedItem(): GridItem | undefined {\n    const element =\n      this.root.querySelector('.blocklyFieldGridItem:focus') ??\n      this.root.querySelector('.blocklyFieldGridItem');\n    if (!element || !element.id) return undefined;\n\n    const index = this.itemIndices.get(element.id);\n    if (index === undefined) return undefined;\n\n    return this.itemAtIndex(index);\n  }\n}\n\n/**\n * Returns whether or not an object conforms to the ImageProperties\n * interface.\n *\n * @param obj The object to test.\n * @returns True iff the object conforms to ImageProperties.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction isImageProperties(obj: any): obj is ImageProperties {\n  return (\n    obj &&\n    typeof obj === 'object' &&\n    'src' in obj &&\n    typeof obj.src === 'string' &&\n    'alt' in obj &&\n    typeof obj.alt === 'string' &&\n    'width' in obj &&\n    typeof obj.width === 'number' &&\n    'height' in obj &&\n    typeof obj.height === 'number'\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Grid dropdown field.\n * @author kozbial@google.com (Monica Kozbial)\n */\n\nimport * as Blockly from 'blockly/core';\nimport {Grid} from './grid';\nimport type {GridItem} from './grid_item';\n\n/**\n * A config object for defining a field grid dropdown.\n */\nexport interface FieldGridDropdownConfig extends Blockly.FieldDropdownConfig {\n  columns?: string | number;\n  primaryColour?: string;\n  borderColour?: string;\n}\n\n/**\n * Construct a FieldGridDropdown from a JSON arg object.\n */\nexport interface FieldGridDropdownFromJsonConfig\n  extends FieldGridDropdownConfig {\n  options?: Blockly.MenuGenerator;\n}\n\ntype FieldGridDropdownValidator = Blockly.FieldDropdownValidator;\n\n/**\n * Grid dropdown field.\n */\nexport class FieldGridDropdown extends Blockly.FieldDropdown {\n  /**\n   * The number of columns in the dropdown grid. Must be an integer value\n   * greater than 0. Defaults to 3.\n   */\n  private columns = 3;\n\n  private primaryColour?: string;\n\n  private borderColour?: string;\n\n  /** Object representing the grid of choices show in the dropdown. */\n  private grid?: Grid;\n\n  /**\n   * Class for an grid dropdown field.\n   *\n   * @param menuGenerator A non-empty array of options for a dropdown list,\n   *   or a function which generates these options.\n   * @param validator A function that is called to validate\n   *  changes to the field's value. Takes in a language-neutral dropdown\n   *  option & returns a validated language-neutral dropdown option, or null\n   *  to abort the change.\n   * @param config A map of options used to configure the field.\n   *  See the [field creation documentation]{@link\n   * https://developers.google.com/blockly/guides/create-custom-blocks/fields/built-in-fields/dropdown#creation}\n   *  for a list of properties this parameter supports.\n   * @extends {Blockly.Field}\n   * @constructor\n   * @throws {TypeError} If `menuGenerator` options are incorrectly structured.\n   */\n  constructor(\n    menuGenerator: Blockly.MenuGenerator,\n    validator?: FieldGridDropdownValidator,\n    config?: FieldGridDropdownConfig,\n  ) {\n    super(menuGenerator, validator, config);\n\n    if (config?.columns) {\n      this.setColumns(parseInt(`${config.columns}`));\n    }\n\n    if (config && config.primaryColour) {\n      this.primaryColour = config.primaryColour;\n    }\n\n    if (config && config.borderColour) {\n      this.borderColour = config.borderColour;\n    }\n  }\n\n  /**\n   * Constructs a FieldGridDropdown from a JSON arg object.\n   *\n   * @param config A JSON object with options.\n   * @returns The new field instance.\n   * @package\n   * @nocollapse\n   */\n  static fromJson(config: FieldGridDropdownFromJsonConfig) {\n    if (!config.options) {\n      throw new Error(\n        'options are required for the dropdown field. The ' +\n          'options property must be assigned an array of ' +\n          '[humanReadableValue, languageNeutralValue] tuples.',\n      );\n    }\n    // `this` might be a subclass of FieldDropdown if that class doesn't\n    // override the static fromJson method.\n    return new this(config.options, undefined, config);\n  }\n\n  /**\n   * Sets the number of columns on the grid. Updates the styling to reflect.\n   *\n   * @param columns The number of columns. Is rounded to\n   *    an integer value and must be greater than 0. Invalid\n   *    values are ignored.\n   */\n  setColumns(columns: number) {\n    if (!isNaN(columns) && columns >= 1) {\n      this.columns = columns;\n      // If the field is currently being shown, reload the grid.\n      if (\n        Blockly.DropDownDiv.getOwner() === this &&\n        Blockly.DropDownDiv.isVisible()\n      ) {\n        this.grid?.dispose();\n        this.showEditor_();\n      }\n    }\n  }\n\n  /* eslint-disable @typescript-eslint/naming-convention */\n  /**\n   * Create a dropdown menu under the text.\n   *\n   * @param e Optional mouse event that triggered the field to open, or\n   *  undefined if triggered programmatically.\n   */\n  protected showEditor_(e?: MouseEvent) {\n    Blockly.DropDownDiv.clearContent();\n    const rtl = !!this.getSourceBlock()?.workspace.RTL;\n    this.grid = new Grid(\n      Blockly.DropDownDiv.getContentDiv(),\n      this.getOptions(false),\n      this.columns,\n      rtl,\n      (selectedItem: GridItem) => {\n        Blockly.DropDownDiv.hideIfOwner(this);\n        this.setValue(selectedItem.getValue());\n      },\n    );\n\n    Blockly.DropDownDiv.getContentDiv().classList.add(\n      'blocklyFieldGridContainer',\n    );\n\n    const colours = this.getColours();\n    if (colours && colours.border) {\n      Blockly.DropDownDiv.setColour(colours.primary, colours.border);\n    }\n\n    Blockly.DropDownDiv.showPositionedByField(\n      this,\n      this.dropdownDispose_.bind(this),\n    );\n\n    const selectedValue = this.getValue();\n    if (selectedValue) {\n      this.grid.setSelectedValue(selectedValue);\n    }\n  }\n\n  /**\n   * Updates the field's value to the given value.\n   *\n   * @param newValue The new value for this field.\n   */\n  protected override doValueUpdate_(newValue: string) {\n    super.doValueUpdate_(newValue);\n    this.grid?.setSelectedValue(newValue);\n  }\n\n  /**\n   * Determine the colours for the dropdowndiv. The dropdown should match block\n   * colour unless other colours are specified in the config.\n   *\n   * @returns The colours to set for the dropdowndiv.\n   */\n  private getColours() {\n    if (this.primaryColour && this.borderColour) {\n      return {\n        primary: this.primaryColour,\n        border: this.borderColour,\n      };\n    }\n\n    const sourceBlock = this.getSourceBlock();\n    if (!(sourceBlock instanceof Blockly.BlockSvg)) return;\n\n    const colourSource = sourceBlock.isShadow()\n      ? sourceBlock.getParent()\n      : sourceBlock;\n    if (!colourSource) return;\n\n    return {\n      primary: this.primaryColour ?? colourSource.getColour(),\n      border: this.borderColour ?? colourSource.getColourTertiary(),\n    };\n  }\n}\n\nBlockly.fieldRegistry.register('field_grid_dropdown', FieldGridDropdown);\n\n/**\n * CSS for grid field.\n */\nBlockly.Css.register(`\n   .blocklyFieldGridContainer {\n     padding: 7px;\n     overflow: auto;\n   }\n   \n  .blocklyFieldGrid {\n    display: grid;\n    grid-gap: 7px;\n    grid-template-columns: repeat(var(--grid-columns), min-content);\n  }\n\n .blocklyFieldGrid .blocklyFieldGridItem {\n   border: 1px solid rgba(1, 1, 1, 0.5);\n   border-radius: 4px;\n   color: white;\n   min-width: auto;\n   background: none;\n   white-space: nowrap;\n   cursor: pointer;\n   padding: 6px 15px;\n }\n \n .blocklyFieldGrid .blocklyFieldGridRow {\n   display: contents;\n }\n \n .blocklyFieldGrid .blocklyFieldGridItem.blocklyFieldGridItemSelected {\n   background-color: rgba(1, 1, 1, 0.25);\n }\n\n .blocklyFieldGrid .blocklyFieldGridItem:focus {\n   box-shadow: 0 0 0 4px hsla(0, 0%, 100%, .2);\n   outline: none;\n }\n `);\n"],"names":["root","factory","exports","module","require","define","amd","a","i","this","__WEBPACK_EXTERNAL_MODULE__370__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","GridItem","constructor","container","content","selectionCallback","selected","element","document","createElement","id","utils","idGenerator","getNextUniqueId","className","clickHandler","browserEvents","conditionalBind","onClick","appendChild","contentDom","createTextNode","aria","setRole","Role","GRIDCELL","dispose","remove","unbind","getId","getValue","isSelected","setSelected","setState","State","SELECTED","classList","toggle","focus","preventScroll","scrollingParent","offsetParent","offsetTop","scrollTop","spacing","getInterItemSpacing","scrollTo","offsetHeight","clientHeight","scrollBy","grid","closest","items","querySelectorAll","length","initialTop","initialHeight","item","Grid","options","columns","rtl","itemIndices","Map","Array","keyDownHandler","pointerMoveHandler","tabIndex","GRID","populateItems","onKeyDown","onPointerMove","Error","style","setProperty","row","index","entries","FieldDropdown","SEPARATOR","ROW","label","src","alt","width","height","image","Image","gridItem","selectedItem","setSelectedValue","set","size","push","clear","e","shiftKey","ctrlKey","metaKey","altKey","moveFocus","stopPropagation","preventDefault","movementX","movementY","target","Element","targetId","targetIndex","relative","focusedItem","getFocusedItem","indexOfItem","targetItem","itemAtIndex","ACTIVEDESCENDANT","querySelector","FieldGridDropdown","menuGenerator","validator","config","super","setColumns","parseInt","primaryColour","borderColour","fromJson","isNaN","getOwner","isVisible","showEditor_","clearContent","getSourceBlock","workspace","RTL","getContentDiv","getOptions","hideIfOwner","setValue","add","colours","getColours","border","setColour","primary","showPositionedByField","dropdownDispose_","bind","selectedValue","doValueUpdate_","newValue","sourceBlock","colourSource","isShadow","getParent","getColour","getColourTertiary","register"],"sourceRoot":""}