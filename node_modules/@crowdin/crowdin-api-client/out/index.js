"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
const ai_1 = require("./ai");
const applications_1 = require("./applications");
const bundles_1 = require("./bundles");
const clients_1 = require("./clients");
const core_1 = require("./core");
const dictionaries_1 = require("./dictionaries");
const distributions_1 = require("./distributions");
const fields_1 = require("./fields");
const glossaries_1 = require("./glossaries");
const issues_1 = require("./issues");
const labels_1 = require("./labels");
const languages_1 = require("./languages");
const machineTranslation_1 = require("./machineTranslation");
const notifications_1 = require("./notifications");
const organizationWebhooks_1 = require("./organizationWebhooks");
const projectsGroups_1 = require("./projectsGroups");
const reports_1 = require("./reports");
const screenshots_1 = require("./screenshots");
const securityLogs_1 = require("./securityLogs");
const sourceFiles_1 = require("./sourceFiles");
const sourceStrings_1 = require("./sourceStrings");
const stringComments_1 = require("./stringComments");
const stringCorrections_1 = require("./stringCorrections");
const stringTranslations_1 = require("./stringTranslations");
const tasks_1 = require("./tasks");
const teams_1 = require("./teams");
const translationMemory_1 = require("./translationMemory");
const translationStatus_1 = require("./translationStatus");
const translations_1 = require("./translations");
const uploadStorage_1 = require("./uploadStorage");
const users_1 = require("./users");
const vendors_1 = require("./vendors");
const webhooks_1 = require("./webhooks");
const workflows_1 = require("./workflows");
__exportStar(require("./ai"), exports);
__exportStar(require("./applications"), exports);
__exportStar(require("./bundles"), exports);
__exportStar(require("./clients"), exports);
__exportStar(require("./core"), exports);
__exportStar(require("./dictionaries"), exports);
__exportStar(require("./distributions"), exports);
__exportStar(require("./fields"), exports);
__exportStar(require("./glossaries"), exports);
__exportStar(require("./issues"), exports);
__exportStar(require("./labels"), exports);
__exportStar(require("./languages"), exports);
__exportStar(require("./machineTranslation"), exports);
__exportStar(require("./notifications"), exports);
__exportStar(require("./organizationWebhooks"), exports);
__exportStar(require("./projectsGroups"), exports);
__exportStar(require("./reports"), exports);
__exportStar(require("./screenshots"), exports);
__exportStar(require("./securityLogs"), exports);
__exportStar(require("./sourceFiles"), exports);
__exportStar(require("./sourceStrings"), exports);
__exportStar(require("./stringComments"), exports);
__exportStar(require("./stringCorrections"), exports);
__exportStar(require("./stringTranslations"), exports);
__exportStar(require("./tasks"), exports);
__exportStar(require("./teams"), exports);
__exportStar(require("./translationMemory"), exports);
__exportStar(require("./translationStatus"), exports);
__exportStar(require("./translations"), exports);
__exportStar(require("./uploadStorage"), exports);
__exportStar(require("./users"), exports);
__exportStar(require("./vendors"), exports);
__exportStar(require("./webhooks"), exports);
__exportStar(require("./workflows"), exports);
/**
 * @internal
 */
class Client extends core_1.CrowdinApi {
    constructor(credentials, config) {
        super(credentials, config);
        this.aiApi = new ai_1.Ai(credentials, config);
        this.applicationsApi = new applications_1.Applications(credentials, config);
        this.sourceFilesApi = new sourceFiles_1.SourceFiles(credentials, config);
        this.glossariesApi = new glossaries_1.Glossaries(credentials, config);
        this.languagesApi = new languages_1.Languages(credentials, config);
        this.translationsApi = new translations_1.Translations(credentials, config);
        this.translationStatusApi = new translationStatus_1.TranslationStatus(credentials, config);
        this.projectsGroupsApi = new projectsGroups_1.ProjectsGroups(credentials, config);
        this.reportsApi = new reports_1.Reports(credentials, config);
        this.screenshotsApi = new screenshots_1.Screenshots(credentials, config);
        this.sourceStringsApi = new sourceStrings_1.SourceStrings(credentials, config);
        this.uploadStorageApi = new uploadStorage_1.UploadStorage(credentials, config);
        this.tasksApi = new tasks_1.Tasks(credentials, config);
        this.translationMemoryApi = new translationMemory_1.TranslationMemory(credentials, config);
        this.webhooksApi = new webhooks_1.Webhooks(credentials, config);
        this.organizationWebhooksApi = new organizationWebhooks_1.OrganizationWebhooks(credentials, config);
        this.machineTranslationApi = new machineTranslation_1.MachineTranslation(credentials, config);
        this.stringTranslationsApi = new stringTranslations_1.StringTranslations(credentials, config);
        this.workflowsApi = new workflows_1.Workflows(credentials, config);
        this.usersApi = new users_1.Users(credentials, config);
        this.vendorsApi = new vendors_1.Vendors(credentials, config);
        this.issuesApi = new issues_1.Issues(credentials, config);
        this.teamsApi = new teams_1.Teams(credentials, config);
        this.distributionsApi = new distributions_1.Distributions(credentials, config);
        this.dictionariesApi = new dictionaries_1.Dictionaries(credentials, config);
        this.labelsApi = new labels_1.Labels(credentials, config);
        this.stringCommentsApi = new stringComments_1.StringComments(credentials, config);
        this.bundlesApi = new bundles_1.Bundles(credentials, config);
        this.notificationsApi = new notifications_1.Notifications(credentials, config);
        this.clientsApi = new clients_1.Clients(credentials, config);
        this.securityLogsApi = new securityLogs_1.SecurityLogs(credentials, config);
        this.fieldsApi = new fields_1.Fields(credentials, config);
        this.stringCorrectionsApi = new stringCorrections_1.StringCorrections(credentials, config);
    }
}
exports.default = Client;
exports.Client = Client;
